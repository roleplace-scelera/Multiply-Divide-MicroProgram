//  OutBin.jas
//
//  Author
//    Prabakar
//
//  Description
//    Program to input two hex numbers, add them, and print the result in binary format.
//    Also, illustrates how to invoke methods.
//
//  Usage
//    To compile:  java ijvmasm OutBin.jas
//      This will create OutBin.ijvm
//
//    To run:      java mic1sim OutBinNibble.mic1 OutBin.ijvm
//      Click the Run button
//      Enter the first number (up to 4 digit hex, using upper-case "A"-"F")
//      Press return
//      Enter the second number and press return
//      The result will be displayed, with leading zeros (always prints 32 bits)
//      Repeat as often as desired
//      Click on the Stop button

.constant
OBJREF 0x40			// needed for method invokation - see S.C.O. chapter 4
.end-constant


.main				// start of program

.var				// local variables for main program
a
b
.end-var

Start: BIPUSH 0x20		// print "  "
	DUP
	OUT
	OUT
	BIPUSH 0x41		// print "A"
	OUT
	BIPUSH 0x20		// print " "
	OUT
	LDC_W OBJREF		// prepare for method call
	INVOKEVIRTUAL getNumber
	ISTORE a		// store return value in a
	BIPUSH 0x2B		// print "+"
	OUT
	BIPUSH 0x20		// print " "
	OUT
	BIPUSH 0x42		// print "B"
	OUT
	BIPUSH 0x20		// print " "
	OUT
	LDC_W OBJREF
	INVOKEVIRTUAL getNumber
	ISTORE b		// store return value in b
	LDC_W OBJREF
	INVOKEVIRTUAL printDashLine
	POP			// pop & discard return value
	ILOAD a
	ILOAD b
	IADD
	BIPUSH 0x20		// print " "
	DUP
	OUT
	OUT
	BIPUSH 0x53
	OUT			// print 'S'
	BIPUSH 0x20		// print " "
	OUT
	OUTBIN
	BIPUSH 0xA		// print LF
	DUP
	OUT
	OUT
	GOTO Start		// start over
.end-main

.method getNumber()
.var
inpHexList
.end-var

	BIPUSH 0x0		// initialize inpHexList
      ISTORE inpHexList
getChar: IN			// read key press
	DUP			// duplicate key for comparison
	BIPUSH 0xA		// if key = LF,
	IF_ICMPEQ finish	//   return the input hex characters
	DUP
	BIPUSH 0x30		// if key < "0"
	ISUB			//
	IFLT invalidKey		//   goto invalidKey (key is not a hex digit)
    	DUP
	BIPUSH 0x3A		// else if key < ":"
	ISUB			//
	IFLT hexDigit		//   goto hexDigit (key is numeric character - "0"-"9")
	DUP
	BIPUSH 0x41		// else if key < "A"
	ISUB			//
	IFLT invalidKey		//   goto invalidKey (key is not a hex digit)
	DUP
	BIPUSH 0x46		// else if key > "F"
	SWAP			//  
	ISUB			//
	IFLT invalidKey		//   goto invalidKey (key is not a hex digit)
	DUP			// else (key is letter - "A"-"F")
	OUT			//   print key
	BIPUSH 0x37		//   convert key from character to number
	ISUB			//
	GOTO hexLetter		//   goto hexLetter
hexDigit: DUP
	OUT			// print key (numeric character)
	BIPUSH 0x30		// convert key from character to number
	ISUB
hexLetter: ILOAD inpHexList 	// shift inpHexList left 4 bits
	DUP
	IADD
	DUP
	IADD
	DUP
	IADD
	DUP
	IADD
	IADD			// add input_key to inpHexList
	ISTORE inpHexList
	GOTO getChar		// get next key
invalidKey:	POP		// pop invalid character
	GOTO getChar		// get next key
finish: OUT			// print LF
	ILOAD inpHexList	// load inpHexList as return value
	IRETURN			// return
.end-method

.method printDashLine()
	BIPUSH 0x3D		// print "========"
	DUP
	OUT
	DUP
	OUT
	DUP
	OUT
	DUP
	OUT
	DUP
	OUT
	DUP
	OUT
	DUP
	OUT
	OUT
	BIPUSH 0xA		// print LF
	OUT
	IRETURN
.end-method

